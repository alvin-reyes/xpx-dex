{"version":3,"sources":["webpack:///./src/components/shared/Sparkline.vue?418f","webpack:///src/components/shared/Sparkline.vue","webpack:///./src/components/shared/Sparkline.vue?dda5","webpack:///../../../../src/components/VSparkline/helpers/core.ts","webpack:///../../../../src/components/VSparkline/helpers/math.ts","webpack:///../../../../src/components/VSparkline/helpers/path.ts","webpack:///../../../src/components/VSparkline/VSparkline.ts","webpack:///./src/components/shared/Sparkline.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","fill","value","height","gradient","staticRenderFns","props","data","theme","maxY","totalValues","values","maxValue","Math","minValue","gridX","maxX","gridY","x","minX","index","y","horizonY","parseInt","p0","p2","p1","vector","to","from","length","unitVector","radius","start","points","end","next","prev","isCollinear","checkCollinear","point","threshold","getDistance","isTooCloseForRadius","radiusForPoint","before","moveTo","after","mixins","name","inheritAttrs","autoDraw","autoDrawDuration","type","default","autoDrawEasing","autoLineWidth","color","gradientDirection","validator","val","includes","String","labels","labelSize","Number","lineWidth","padding","showLabels","smooth","Boolean","width","lastLength","computed","parsedPadding","parsedWidth","parsedHeight","parsedLabelSize","totalHeight","totalWidth","_lineWidth","totalPadding","parseFloat","boundary","minY","hasLabels","$scopedSlots","parsedLabels","len","i","item","normalizedValues","map","_values","genPoints","textY","_radius","watch","immediate","handler","path","methods","genGradient","stops","offset","id","x1","y1","x2","y2","genG","style","fontSize","textAnchor","dominantBaseline","genPath","d","stroke","_uid","ref","genLabels","children","genLabel","label","genBars","bars","offsetX","display","viewBox","genClipPath","rounding","rx","ry","attributeName","dur","genTrend","setTextColor","component","VSparkline"],"mappings":"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","file":"js/chunk-2d0e4e52.6ba4f1d2.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-sparkline',{attrs:{\"fill\":_vm.fill,\"value\":_vm.value,\"line-width\":\"1\",\"padding\":\"1\",\"height\":_vm.height,\"auto-draw\":\"\",\"gradient\":_vm.gradient}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <v-sparkline\n    :fill=\"fill\"\n    :value=\"value\"\n    line-width=\"1\"\n    padding=\"1\"\n    :height=\"height\"\n    auto-draw\n    :gradient=\"gradient\"\n  ></v-sparkline>\n</template>\n<script>\nexport default {\n  props: ['value', 'height'],\n  data: () => {\n    return {\n      fill: true,\n      theme: 'light',\n      gradient: ['#1C82A9', '#1C82A9', 'white']\n    }\n  }\n}\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sparkline.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sparkline.vue?vue&type=script&lang=js&\"","import { Point, Boundary, Bar } from '../VSparkline'\n\nexport function genPoints (\n  values: number[],\n  boundary: Boundary\n): Point[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  const maxValue = Math.max(...values)\n  const minValue = Math.min(...values)\n\n  const gridX = (maxX - minX) / (totalValues - 1)\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n\n  return values.map((value, index) => {\n    return {\n      x: minX + index * gridX,\n      y:\n        maxY -\n        (value - minValue) * gridY +\n        +(index === totalValues - 1) * 0.00001 -\n        +(index === 0) * 0.00001,\n      value,\n    }\n  })\n}\n\nexport function genBars (\n  values: number[],\n  boundary: Boundary\n): Bar[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  let maxValue = Math.max(...values)\n  let minValue = Math.min(...values)\n\n  if (minValue > 0) minValue = 0\n  if (maxValue < 0) maxValue = 0\n\n  const gridX = maxX / totalValues\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n  const horizonY = maxY - Math.abs(minValue * gridY)\n\n  return values.map((value, index) => {\n    const height = Math.abs(gridY * value)\n\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height +\n        +(value < 0) * height,\n      height,\n      value,\n    }\n  })\n}\n","import { Point } from '../VSparkline'\n\nfunction int (value: string | number): number {\n  return parseInt(value, 10)\n}\n\n/**\n * https://en.wikipedia.org/wiki/Collinearity\n * x=(x1+x2)/2\n * y=(y1+y2)/2\n */\nexport function checkCollinear (p0: Point, p1: Point, p2: Point): boolean {\n  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y)\n}\n\nexport function getDistance (p1: Point, p2: Point): number {\n  return Math.sqrt(\n    Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)\n  )\n}\n\nexport function moveTo (to: Point, from: Point, radius: number) {\n  const vector = { x: to.x - from.x, y: to.y - from.y }\n  const length = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y))\n  const unitVector = { x: vector.x / length, y: vector.y / length }\n\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius,\n  }\n}\n","import { Point } from '../VSparkline'\nimport { checkCollinear, getDistance, moveTo } from './math'\n\n/**\n * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18\n */\nexport function genPath (points: Point[], radius: number, fill = false, height = 75) {\n  const start = points.shift()!\n  const end = points[points.length - 1]\n\n  return (\n    (fill ? `M${start.x} ${height - start.x + 2} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) +\n    points\n      .map((point, index) => {\n        const next = points[index + 1]\n        const prev = points[index - 1] || start\n        const isCollinear = next && checkCollinear(next, point, prev)\n\n        if (!next || isCollinear) {\n          return `L${point.x} ${point.y}`\n        }\n\n        const threshold = Math.min(\n          getDistance(prev, point),\n          getDistance(next, point)\n        )\n        const isTooCloseForRadius = threshold / 2 < radius\n        const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius\n\n        const before = moveTo(prev, point, radiusForPoint)\n        const after = moveTo(next, point, radiusForPoint)\n\n        return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`\n      })\n      .join('') +\n    (fill ? `L${end.x} ${height - start.x + 2} Z` : '')\n  )\n}\n","// Mixins\nimport Colorable from '../../mixins/colorable'\n\n// Utilities\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { genPoints, genBars } from './helpers/core'\nimport { genPath } from './helpers/path'\n\n// Types\nimport Vue, { VNode } from 'vue'\nimport { Prop, PropValidator } from 'vue/types/options'\n\nexport type SparklineItem = number | { value: number }\n\nexport type SparklineText = {\n  x: number\n  value: string\n}\n\nexport interface Boundary {\n  minX: number\n  minY: number\n  maxX: number\n  maxY: number\n}\n\nexport interface Point {\n  x: number\n  y: number\n  value: number\n}\n\nexport interface Bar {\n  x: number\n  y: number\n  height: number\n  value: number\n}\n\ninterface options extends Vue {\n  $refs: {\n    path: SVGPathElement\n  }\n}\n\nexport default mixins<options &\n/* eslint-disable indent */\n  ExtractVue<[\n    typeof Colorable\n  ]>\n/* eslint-enable indent */\n>(\n  Colorable\n).extend({\n  name: 'VSparkline',\n\n  inheritAttrs: false,\n\n  props: {\n    autoDraw: Boolean,\n    autoDrawDuration: {\n      type: Number,\n      default: 2000,\n    },\n    autoDrawEasing: {\n      type: String,\n      default: 'ease',\n    },\n    autoLineWidth: {\n      type: Boolean,\n      default: false,\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n    fill: {\n      type: Boolean,\n      default: false,\n    },\n    gradient: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    gradientDirection: {\n      type: String as Prop<'top' | 'bottom' | 'left' | 'right'>,\n      validator: (val: string) => ['top', 'bottom', 'left', 'right'].includes(val),\n      default: 'top',\n    },\n    height: {\n      type: [String, Number],\n      default: 75,\n    },\n    labels: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<SparklineItem[]>,\n    labelSize: {\n      type: [Number, String],\n      default: 7,\n    },\n    lineWidth: {\n      type: [String, Number],\n      default: 4,\n    },\n    padding: {\n      type: [String, Number],\n      default: 8,\n    },\n    showLabels: Boolean,\n    smooth: {\n      type: [Boolean, Number, String],\n      default: false,\n    },\n    type: {\n      type: String as Prop<'trend' | 'bar'>,\n      default: 'trend',\n      validator: (val: string) => ['trend', 'bar'].includes(val),\n    },\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<SparklineItem[]>,\n    width: {\n      type: [Number, String],\n      default: 300,\n    },\n  },\n\n  data: () => ({\n    lastLength: 0,\n  }),\n\n  computed: {\n    parsedPadding (): number {\n      return Number(this.padding)\n    },\n    parsedWidth (): number {\n      return Number(this.width)\n    },\n    parsedHeight (): number {\n      return parseInt(this.height, 10)\n    },\n    parsedLabelSize (): number {\n      return parseInt(this.labelSize, 10) || 7\n    },\n    totalHeight (): number {\n      let height = this.parsedHeight\n\n      if (this.hasLabels) height += parseInt(this.labelSize, 10) * 1.5\n\n      return height\n    },\n    totalWidth (): number {\n      let width = this.parsedWidth\n      if (this.type === 'bar') width = Math.max(this.value.length * this._lineWidth, width)\n\n      return width\n    },\n    totalValues (): number {\n      return this.value.length\n    },\n    _lineWidth (): number {\n      if (this.autoLineWidth && this.type !== 'trend') {\n        const totalPadding = this.parsedPadding * (this.totalValues + 1)\n        return (this.parsedWidth - totalPadding) / this.totalValues\n      } else {\n        return parseFloat(this.lineWidth) || 4\n      }\n    },\n    boundary (): Boundary {\n      if (this.type === 'bar') return { minX: 0, maxX: this.totalWidth, minY: 0, maxY: this.parsedHeight }\n\n      const padding = this.parsedPadding\n\n      return {\n        minX: padding,\n        maxX: this.totalWidth - padding,\n        minY: padding,\n        maxY: this.parsedHeight - padding,\n      }\n    },\n    hasLabels (): boolean {\n      return Boolean(\n        this.showLabels ||\n        this.labels.length > 0 ||\n        this.$scopedSlots.label\n      )\n    },\n    parsedLabels (): SparklineText[] {\n      const labels = []\n      const points = this._values\n      const len = points.length\n\n      for (let i = 0; labels.length < len; i++) {\n        const item = points[i]\n        let value = this.labels[i]\n\n        if (!value) {\n          value = typeof item === 'object'\n            ? item.value\n            : item\n        }\n\n        labels.push({\n          x: item.x,\n          value: String(value),\n        })\n      }\n\n      return labels\n    },\n    normalizedValues (): number[] {\n      return this.value.map(item => (typeof item === 'number' ? item : item.value))\n    },\n    _values (): Point[] | Bar[] {\n      return this.type === 'trend' ? genPoints(this.normalizedValues, this.boundary) : genBars(this.normalizedValues, this.boundary)\n    },\n    textY (): number {\n      let y = this.parsedHeight\n      if (this.type === 'trend') y -= 4\n      return y\n    },\n    _radius (): number {\n      return this.smooth === true ? 8 : Number(this.smooth)\n    },\n  },\n\n  watch: {\n    value: {\n      immediate: true,\n      handler () {\n        this.$nextTick(() => {\n          if (\n            !this.autoDraw ||\n            this.type === 'bar' ||\n            !this.$refs.path\n          ) return\n\n          const path = this.$refs.path\n          const length = path.getTotalLength()\n\n          if (!this.fill) {\n            path.style.transition = 'none'\n            path.style.strokeDasharray = length + ' ' + length\n            path.style.strokeDashoffset = Math.abs(length - (this.lastLength || 0)).toString()\n            path.getBoundingClientRect()\n            path.style.transition = `stroke-dashoffset ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\n            path.style.strokeDashoffset = '0'\n          } else {\n            path.style.transformOrigin = 'bottom center'\n            path.style.transition = 'none'\n            path.style.transform = `scaleY(0)`\n            path.getBoundingClientRect()\n            path.style.transition = `transform ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\n            path.style.transform = `scaleY(1)`\n          }\n          this.lastLength = length\n        })\n      },\n    },\n  },\n\n  methods: {\n    genGradient () {\n      const gradientDirection = this.gradientDirection\n      const gradient = this.gradient.slice()\n\n      // Pushes empty string to force\n      // a fallback to currentColor\n      if (!gradient.length) gradient.push('')\n\n      const len = Math.max(gradient.length - 1, 1)\n      const stops = gradient.reverse().map((color, index) =>\n        this.$createElement('stop', {\n          attrs: {\n            offset: index / len,\n            'stop-color': color || 'currentColor',\n          },\n        })\n      )\n\n      return this.$createElement('defs', [\n        this.$createElement('linearGradient', {\n          attrs: {\n            id: this._uid,\n            x1: +(gradientDirection === 'left'),\n            y1: +(gradientDirection === 'top'),\n            x2: +(gradientDirection === 'right'),\n            y2: +(gradientDirection === 'bottom'),\n          },\n        }, stops),\n      ])\n    },\n    genG (children: VNode[]) {\n      return this.$createElement('g', {\n        style: {\n          fontSize: '8',\n          textAnchor: 'middle',\n          dominantBaseline: 'mathematical',\n          fill: 'currentColor',\n        } as object, // TODO: TS 3.5 is too eager with the array type here\n      }, children)\n    },\n    genPath () {\n      const points = genPoints(this.normalizedValues, this.boundary)\n\n      return this.$createElement('path', {\n        attrs: {\n          d: genPath(points, this._radius, this.fill, this.parsedHeight),\n          fill: this.fill ? `url(#${this._uid})` : 'none',\n          stroke: this.fill ? 'none' : `url(#${this._uid})`,\n        },\n        ref: 'path',\n      })\n    },\n    genLabels (offsetX: number) {\n      const children = this.parsedLabels.map((item, i) => (\n        this.$createElement('text', {\n          attrs: {\n            x: item.x + offsetX + this._lineWidth / 2,\n            y: this.textY + (this.parsedLabelSize * 0.75),\n            'font-size': Number(this.labelSize) || 7,\n          },\n        }, [this.genLabel(item, i)])\n      ))\n\n      return this.genG(children)\n    },\n    genLabel (item: SparklineText, index: number) {\n      return this.$scopedSlots.label\n        ? this.$scopedSlots.label({ index, value: item.value })\n        : item.value\n    },\n    genBars () {\n      if (!this.value || this.totalValues < 2) return undefined as never\n\n      const bars = genBars(this.normalizedValues, this.boundary)\n      const offsetX = (Math.abs(bars[0].x - bars[1].x) - this._lineWidth) / 2\n\n      return this.$createElement('svg', {\n        attrs: {\n          display: 'block',\n          viewBox: `0 0 ${this.totalWidth} ${this.totalHeight}`,\n        },\n      }, [\n        this.genGradient(),\n        this.genClipPath(bars, offsetX, this._lineWidth, 'sparkline-bar-' + this._uid),\n        this.hasLabels ? this.genLabels(offsetX) : undefined as never,\n        this.$createElement('g', {\n          attrs: {\n            'clip-path': `url(#sparkline-bar-${this._uid}-clip)`,\n            fill: `url(#${this._uid})`,\n          },\n        }, [\n          this.$createElement('rect', {\n            attrs: {\n              x: 0,\n              y: 0,\n              width: this.totalWidth,\n              height: this.height,\n            },\n          }),\n        ]),\n      ])\n    },\n    genClipPath (bars: Bar[], offsetX: number, lineWidth: number, id: string) {\n      const rounding = typeof this.smooth === 'number'\n        ? this.smooth\n        : this.smooth ? 2 : 0\n\n      return this.$createElement('clipPath', {\n        attrs: {\n          id: `${id}-clip`,\n        },\n      }, bars.map(item => {\n        return this.$createElement('rect', {\n          attrs: {\n            x: item.x + offsetX,\n            y: item.y,\n            width: lineWidth,\n            height: item.height,\n            rx: rounding,\n            ry: rounding,\n          },\n        }, [\n          this.autoDraw ? this.$createElement('animate', {\n            attrs: {\n              attributeName: 'height',\n              from: 0,\n              to: item.height,\n              dur: `${this.autoDrawDuration}ms`,\n              fill: 'freeze',\n            },\n          }) : undefined as never,\n        ])\n      }))\n    },\n    genTrend () {\n      return this.$createElement('svg', this.setTextColor(this.color, {\n        attrs: {\n          ...this.$attrs,\n          display: 'block',\n          'stroke-width': this._lineWidth || 1,\n          viewBox: `0 0 ${this.width} ${this.totalHeight}`,\n        },\n      }), [\n        this.genGradient(),\n        this.hasLabels && this.genLabels(-(this._lineWidth / 2)),\n        this.genPath(),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    if (this.totalValues < 2) return undefined as never\n\n    return this.type === 'trend' ? this.genTrend() : this.genBars()\n  },\n})\n","import { render, staticRenderFns } from \"./Sparkline.vue?vue&type=template&id=62b1c8f0&\"\nimport script from \"./Sparkline.vue?vue&type=script&lang=js&\"\nexport * from \"./Sparkline.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VSparkline } from 'vuetify/lib/components/VSparkline';\ninstallComponents(component, {VSparkline})\n"],"sourceRoot":""}